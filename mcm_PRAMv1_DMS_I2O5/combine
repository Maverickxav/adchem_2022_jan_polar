#!/usr/bin/perl -w
#
# A preprocessing tool for some KPP-files
# Sampo Smolander, February 2009, sampo.smolander@helsinki.fi

use strict;

# Check that we have exactly 1 argument
my $infile = $ARGV[0];
unless ($infile) { die "  usage: combine <chemistry-file-name>\n"; }
if ((scalar @ARGV)>1) {
    print "  usage: combine <chemistry-file-name>\n"; 
    die "  ...and only 1 input file, please.\n"; }

# Make up a name for output file
my $outfile = $infile . ".combined";

open LOGFILE,">","combine.log";
print LOGFILE "outfile: $outfile\n\n";

# Open file for outputting combined model file
open OUTFILE,">",$outfile;

# Read the names of included files from input file
open INFILE,$infile or die "  ERROR: can't open file: $infile\n";
print LOGFILE "reading file: $infile\n";
my @files;
while (<INFILE>) {
    if (/^\s*#INCLUDE\s+(\S+)\s*$/i) {
	print LOGFILE "found #include for: $1\n";
	if (-e $1) { push @files,$1; }
	else { print LOGFILE "  file does not exist: $1, skipping\n"; } }
    if (/^\s*#/ and not /^\s*#INCLUDE/i) {
	print OUTFILE $_;
	last; } }

# Read and print infile up to line #DEFVAR
while (<INFILE>) { print OUTFILE $_; if (/^\s*#DEFVAR/i) { last; } }

# Read and print infile, while in #DEFVAR section, up to next #
# Also build a hash of chemical names
my (%chemicals,$extra_line,$key);
while (<INFILE>) {
    if (/^\s*#/) { $extra_line = $_; last; }
    print OUTFILE $_;
    if (/^\s*(\S+)\s*=\s*\S+.*;.*$/) {
	$key = uc $1;
	if ($chemicals{$key}) {
	    print "  ERROR: in file: $infile\n";
	    die   "  chemical: $1 is defined more than once\n"; }
	$chemicals{$key} = $_; } }

# Process chemical names from include-files
foreach my $file (@files) {
    open FILE,$file;
    # read up to line #DEFVAR
    while (<FILE>) { if (/^\s*#DEFVAR/i) { last; } }
    # process species definitions
    print LOGFILE "from file: $file discarding:\n";
    while (<FILE>) {
	if (/^\s*#/) {
	    last;
	} elsif (/^\s*(\S+)\s*=\s*\S+.*;/) {
	    $key = uc $1;
	    # if chemical is already in hash, don't take it
	    if ($chemicals{$key}) { print LOGFILE "  $_";
	    # if it's a new encounter, take it to outfile
	    } else {
		$chemicals{$key} = $_;
		print OUTFILE $_; }
        } else {
	    # also print lines that don't look like chemical definitions
	    print OUTFILE $_; } }
    close FILE; }


# Read and print infile up to line #INLINE F90_RCONST
print OUTFILE  $extra_line;
unless ($extra_line =~ /^\s*#INLINE F90_RCONST/i) {
    while (<INFILE>) {
	print OUTFILE $_; if (/^\s*#INLINE F90_RCONST/i) { last; } } }

# will put all RO2-terms here
my @terms = ();

# sub for processing RO2-terms from a line to @terms
sub addline {
    my $line = $_[0];
    print LOGFILE $line;
    $line =~ s/\s*//g;
    $line =~ s/&$//;
    $line =~ s/\+$//;
    $line =~ s/$//;
    $line =~ s/^\+//;
    push @terms, split(/\s*\+\s*/,$line); }

sub printlines {
    my (%h,$lastindex);
    @h{@terms} = @terms;  #remove duplicates
    @terms = sort keys %h;
    $lastindex = $#terms;
    print OUTFILE "   ";
    my $i;
    for ( $i=0 ; $i<$lastindex ; $i++) {
	print OUTFILE "$terms[$i] + ";	
	if ( (2 == $i % 3) and ($lastindex > 2) ) {
	    print OUTFILE " &\n   "; } }
    print OUTFILE "$terms[$lastindex]\n"; }

# Process RO2-terms from include-files
foreach my $file (@files) {
    open FILE,$file;
    # read up to a line beginning: RO2 =
    while (<FILE>) { if (/^\s*RO2\s*=/i) { last; } }
    # process RO2-lines
    print LOGFILE "from file: $file reading RO2-lines:\n";
    while (<FILE>) {
	addline $_;
	unless (/&\s*$/) { last; } }
    close FILE; }

# Read and print infile up to line #ENDINLINE,
# also process RO2 term lines
my $ro2flag = 0;
while (<INFILE>) {
    if (/^\s*RO2\s*=/) {
	$ro2flag = 1;
	print OUTFILE $_;
	print LOGFILE "from file: $infile reading RO2-lines:\n";
	while (<INFILE>) {
	    addline $_;
	    unless (/&\s*$/) { last; } }
	printlines;
    } elsif (/^\s*#ENDINLINE/i) {
	unless ($ro2flag) {
	    print OUTFILE " RO2 = &\n";
	    printlines;
	}
	print OUTFILE $_; last;
    } else {
	print OUTFILE $_; } }

# Read and print infile up to line #EQUATIONS
unless ($extra_line =~ /^\s*#EQUATIONS/i) {
    while (<INFILE>) { print OUTFILE $_; if (/^\s*#EQUATIONS/i) { last; } } }

# Read and print infile, while in #EQUATIONS section, up to next #
# Also build a hash of equations
my (%equations,$key1,$key2,$eq);
while (<INFILE>) {
    if (/^\s*#/) { $extra_line = $_; last; }
    print OUTFILE $_;
    s/^\s*\{.*?}\s*(\S+.*)/$1/;
    if (/^\s*(\S+.*?)\s*=\s*(\S+.*?)\s*:\s*\S+.*;/) {
	$key1 = join "+", sort split /\s*\+\s*/, $1;
	$key2 = join "+", sort split /\s*\+\s*/, $2;
	$key = uc ($key1 . "=" . $key2);
	if ($equations{$key}) {
	    print "  ERROR: in file: $infile equation:\n";
	    print "    $equations{$key}";
	    die   "  is defined more than once\n"; }
	$equations{$key} = $_; } }

# Process equations names from include-files
foreach my $file (@files) {
    open FILE,$file;
    # read up to line #EQUATIONS
    while (<FILE>) { if (/^\s*#EQUATIONS/i) { last; } }
    # process species definitions
    print LOGFILE "from file: $file discarding:\n";
    while (<FILE>) {
	if (/^\s*#/) { last; }
	$eq = $_;
	$eq =~ s/^\s*\{.*?}\s*(\S+.*)/$1/;
	if ($eq =~ /^\s*(\S+.*?)\s*=\s*(\S+.*?)\s*:\s*\S+.*;/) {
	    $key1 = join "+", sort split /\s*\+\s*/, $1;
	    $key2 = join "+", sort split /\s*\+\s*/, $2;
	    $key = uc ($key1 . "=" . $key2);
	    # if equation is already in hash, don't take it
	    if ($equations{$key}) { print LOGFILE "  $_";
	    # if it's a new encounter, take it to outfile
	    } else {
		$equations{$key} = $eq;
		print OUTFILE $eq; }
        } else {
	    # also print lines that don't look like chemical definitions
	    print OUTFILE $_; } }
    close FILE; }

# Print rest of infile to outfile
while (<INFILE>) { print OUTFILE $_; }

close INFILE;
close OUTFILE;
exit;

