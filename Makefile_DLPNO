# compiler
F90 = /usr/local/bin/gfortran

# Put .o and .mod files here:
OBJDIR = build

# When compiling, search for files in these directories:
VPATH = $(OBJDIR): mcm_PRAMv1_DMS megan ACDC_AN_DLPNO ACDC_AD_DLPNO
# VPATH = $(OBJDIR):chemistry_biogenic megan
NETCDF=/opt/local
# Options reminders:
# -w suppresses warning messages

# For programming (faster compiling):
# OPTS1 = -ffree-line-length-none -cpp -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -ffpe-trap=invalid,zero,overflow
# #-Wall -Wextra -Wsurprising -Warray-temporaries -Wtabs -Wno-character-truncation

# #for debugging:
# #OPTS1 = -ffree-line-length-none -cpp -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -Wall -Wextra -g -O0 -ffpe-trap=invalid,zero,overflow -fbounds-check

# #this runs 2x faster, but slower compilation
# OPTS = -ffree-line-length-none -cpp -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -ffpe-trap=invalid,zero,overflow -Os 
#OPTS = -ffree-line-length-none -cpp -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -Wall -Wextra -g -O0 -ffpe-trap=invalid,zero,overflow -fbounds-check
# For programming (faster compiling):
OPTS1 = -ffree-line-length-none -cpp -I$(NETCDF)/include -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -ffpe-trap=invalid,zero,overflow #-O3

#this runs 2x faster, but slower compilation
OPTS = -ffree-line-length-none -cpp -I$(NETCDF)/include -J$(OBJDIR) -I$(OBJDIR) -fcheck=all -ffpe-trap=invalid,zero,overflow -Os 
# OPT = -ffpe-trap=invalid,zero,overflow

CHEM_OPTS = $(OPTS1)

# MAIN_OBJECTS = reaction_rates.o thermodynamics.o acidity.o dynamics.o diffusivity.o constants.o output.o opkdmain.o opkda1.o opkda2.o
MAIN_OBJECTS = reaction_rates.o thermodynamics.o acidity.o dynamics.o diffusivity.o constants.o output.o
CHEM_OBJECTS = second_Precision.o second_Parameters.o second_Initialize.o second_Util.o second_Monitor.o second_JacobianSP.o \
               second_LinearAlgebra.o second_Jacobian.o second_Global.o second_Rates.o second_Integrator.o second_Function.o \
               second_Model.o second_Main.o
MEGAN_OBJECTS = Megan_version_2.o M2_canopy.o M2_SPC_MGN.o M2_LD_FCT.o M2_RHO_SPC.o M2_TEMPD_PRM.o M2_REL_EM_ACT.o M2_gamma_etc.o \
                LAI_Hyy_month.o          
ACDC_OBJECTS = get_acdc_J.o driver.o acdc_system.o acdc_equations.o monomer_settings.o solution_settings.o \
               vode.o vodea.o        
ACDC_OBJECTS_DMA = get_acdc_D.o driver_acdc_D.o acdc_system_AD_new.o acdc_equations_AD_new.o monomer_settings_acdc_DMA.o		   
			   
# Make automatic variables reminder:
#   $@   target
#   $<   first prerequisite
#   $^   all dependencies, duplicates removed

all: orig_adchem1D.exe

# Here is the link step:

orig_adchem1D.exe: adchem1D.o $(MAIN_OBJECTS) $(CHEM_OBJECTS) $(MEGAN_OBJECTS) $(ACDC_OBJECTS) $(ACDC_OBJECTS_DMA)
	 $(F90) $(OPTS) $^ -o $@

# Here are the compile steps:

# Main program

$(OBJDIR)/adchem1D.o: adchem1D_new.f90 $(MAIN_OBJECTS) $(CHEM_OBJECTS) $(MEGAN_OBJECTS) $(ACDC_OBJECTS) $(ACDC_OBJECTS_DMA)
	 $(F90) $(OPTS) -c $< -o $@

# Modules for the main program

$(OBJDIR)/reaction_rates.o: reaction_rates_20220118.f90 constants.o $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/thermodynamics.o: thermodynamicsDMS.f90 constants.o acidity.o $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@	 
	 
$(OBJDIR)/dynamics.o: dynamicsDMS_atm.f90 constants.o $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@	 

$(OBJDIR)/diffusivity.o: diffusivity.f90 constants.o $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@	 	 

$(OBJDIR)/constants.o: constants.f90 $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/acidity.o: acidityDMS.f90 $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/output.o: output.f90 constants.o $(CHEM_OBJECTS)
	 $(F90) $(OPTS) -c $< -o $@
#$(OBJDIR)/cloud_chem.o: cloud_chem.f90 constants.o vode.o vodea.o $(CHEM_OBJECTS) 
#	 $(F90) $(OPTS) -c $< -o $@	 

#$(OBJDIR)/multilayer.o: multilayer.f90 constants.o opkdmain.o opkda1.o opkda2.o $(CHEM_OBJECTS) 
#	 $(F90) $(OPTS) -c $< -o $@
	

# ODEPACK is Fortran 77, hence -std=legacy.
# -w turns off warnings; we are not going to modify ODEPACK code even
# if it gives some warnings.

$(OBJDIR)/opkda1.o: opkda1.f
	$(F90) $(OPTS) -std=legacy -w -c opkda1.f
$(OBJDIR)/opkda2.o: opkda2.f# 	
	$(F90) $(OPTS) -std=legacy -c opkda2.f
$(OBJDIR)/opkdmain.o: opkdmain.f
	$(F90) $(OPTS) -std=legacy -c opkdmain.f

# Download ODEPACK code, if not present:
opkdmain.f:
	wget http://www.netlib.org/odepack/opkdmain.f
opkda1.f:
	wget http://www.netlib.org/odepack/opkda1.f
opkda2.f:
	wget http://www.netlib.org/odepack/opkda2.f
	
# Chemistry

$(OBJDIR)/second_Precision.o: second_Precision.f90
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Parameters.o: second_Parameters.f90 second_Precision.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Global.o: second_Global.f90 second_Parameters.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Initialize.o: second_Initialize.f90 second_Parameters.o second_Global.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Util.o: second_Util.f90 second_Parameters.o second_Monitor.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Monitor.o: second_Monitor.f90
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_JacobianSP.o: second_JacobianSP.f90
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_LinearAlgebra.o: second_LinearAlgebra.f90 second_Parameters.o second_JacobianSP.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Jacobian.o: second_Jacobian.f90 second_Parameters.o second_JacobianSP.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Rates.o: second_Rates.f90 second_Parameters.o second_Global.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Integrator.o: second_Integrator.f90 second_Precision.o second_Global.o second_Parameters.o second_JacobianSP.o \
second_LinearAlgebra.o second_Function.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Function.o: second_Function.f90 second_Parameters.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Model.o: second_Model.f90 second_Precision.o second_Parameters.o second_Global.o second_Function.o \
second_Integrator.o second_Rates.o second_Jacobian.o second_LinearAlgebra.o second_Monitor.o second_Util.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@
$(OBJDIR)/second_Main.o: second_Main.f90 second_Model.o second_Initialize.o
	 $(F90) $(CHEM_OPTS) -c $< -o $@

# MEGAN

$(OBJDIR)/LAI_Hyy_month.o: LAI_Hyy_month.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/M2_canopy.o: megan/M2_canopy.F90
	 $(F90) $(OPTS) -c $< -o $@	 	 
   
$(OBJDIR)/M2_LD_FCT.o: M2_LD_FCT.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/M2_RHO_SPC.o: M2_RHO_SPC.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/M2_TEMPD_PRM.o: M2_TEMPD_PRM.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/M2_REL_EM_ACT.o: M2_REL_EM_ACT.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/M2_SPC_MGN.o: M2_SPC_MGN.f90
	 $(F90) $(OPTS) -c $< -o $@	 	 

$(OBJDIR)/M2_gamma_etc.o: M2_gamma_etc.f90 M2_TEMPD_PRM.o M2_REL_EM_ACT.o
	 $(F90) $(OPTS) -c $< -o $@	 	 
	
$(OBJDIR)/Megan_version_2.o: Megan_version_2.f90 M2_canopy.o M2_gamma_etc.o \
                   M2_LD_FCT.o M2_RHO_SPC.o M2_SPC_MGN.o 
	 $(F90) $(OPTS) -c $< -o $@
	 
# ACDC
# ACDC
$(OBJDIR)/get_acdc_J.o: get_acdc_J_ions.f90 acdc_system.o driver.o vode.o vodea.o
	 $(F90) $(OPTS) -c $< -o $@
 
$(OBJDIR)/driver.o: driver_acdc_J_ions.f90 acdc_system.o solution_settings.o \
                   monomer_settings.o
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/acdc_system.o: acdc_system_AN_ions.f90
	 $(F90) $(OPTS) -c $< -o $@
	 
$(OBJDIR)/acdc_equations.o: acdc_equations_AN_ions.f90 monomer_settings.o
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/monomer_settings.o: monomer_settings_acdc_NH3_ions.f90 acdc_system.o
	 $(F90) $(OPTS) -c $< -o $@
 
$(OBJDIR)/solution_settings.o: solution_settings.f90
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/vode.o: vode.f
	gfortran -std=legacy -O3 -c $< -o $@

$(OBJDIR)/vodea.o: vodea.f
	gfortran -std=legacy -O3 -c $< -o $@
	
$(OBJDIR)/get_acdc_D.o: get_acdc_D.f90 acdc_system_AD_new.o driver_acdc_D.o vode.o vodea.o
	 $(F90) $(OPTS) -c $< -o $@
 
$(OBJDIR)/driver_acdc_D.o: driver_acdc_D.f90 acdc_system_AD_new.o solution_settings.o \
                   monomer_settings_acdc_DMA.o
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/acdc_system_AD_new.o: acdc_system_AD_new.f90
	 $(F90) $(OPTS) -c $< -o $@
	 
$(OBJDIR)/acdc_equations_AD_new.o: acdc_equations_AD_new.f90 monomer_settings_acdc_DMA.o
	 $(F90) $(OPTS) -c $< -o $@

$(OBJDIR)/monomer_settings_acdc_DMA.o: monomer_settings_acdc_DMA.f90 acdc_system_AD_new.o
	 $(F90) $(OPTS) -c $< -o $@

#$(OBJDIR)/vode.o: vode.f
#	$(F90) $(OPTS) -std=legacy -w -c vode.f
#
#$(OBJDIR)/vodea.o: vodea.f 	
#	$(F90) $(OPTS) -std=legacy -c vodea.f

CHEM_MODS = $(CHEM_OBJECTS:.o=.mod)
MAIN_MODS = $(MAIN_OBJECTS:.o=.mod)


# This entry allows you to type 'make clean' to get rid of all object and module files 

# With 'clean', don't remove chemistry object files, since it takes very long (minutes, or tens of minutes if big chemistry)
# to compile them, and there usually is no need to recompile them
clean:
	-@cd $(OBJDIR) ; rm adchem1D.o $(MAIN_OBJECTS) $(MEGAN_OBJECTS) $(ACDC_OBJECTS) $(ACDC_OBJECTS_DMA)   2>/dev/null || true
	-@rm adchem1D.exe                                 2>/dev/null || true

# If you really want to remove chemistry objects too, use this
cleanall:
	-@cd $(OBJDIR) ; rm $(MAIN_OBJECTS) $(CHEM_OBJECTS) $(CHEM_MODS) $(MEGAN_OBJECTS) $(ACDC_OBJECTS) $(ACDC_OBJECTS_DMA)   2>/dev/null || true
	-@cd $(OBJDIR) ; rm adchem1D.o                                    2>/dev/null || true
	-@rm adchem1D.exe                                                 2>/dev/null || true

# Some explanation for the clean commands:
# -            lets make continue when a command gives an error
# @            suppresses echoing the command
# 2>/dev/null  hides the error messages from e.g. rm command, if files don't exist
# || true      hides the message that there was an error in the command
#
# ref. http://stackoverflow.com/questions/3148492/makefile-silent-remove

